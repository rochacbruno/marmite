name: Build and Release

on:
  push:
    tags:
      - '*'
  pull_request:
    branches: [main]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:


jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        target: [x86_64]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true

    - name: Add target for cross-compilation
      run: |
          rustup target add x86_64-unknown-linux-gnu
          rustup target add x86_64-apple-darwin
          rustup target add x86_64-pc-windows-gnu

    - name: Install cross (for building cross-platform binaries)
      run: cargo install cross

    - name: Build release
      run: cross build --target ${{ matrix.target }} --release

    - name: Archive the build output
      if: success()
      run: |
        mkdir -p build
        if [ ${{ matrix.os }} == 'windows-latest' ]; then
          cp target/${{ matrix.target }}/release/*.exe ./build/
        else
          cp target/${{ matrix.target }}/release/* ./build/
        fi
      shell: bash

    - name: Upload binary as artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.os }}-binary
        path: ./build/

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Upload Linux binary
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./build/linux-latest-binary
        asset_name: linux_binary
        asset_content_type: application/octet-stream

    - name: Upload macOS binary
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./build/macos-latest-binary
        asset_name: macos_binary
        asset_content_type: application/octet-stream

    - name: Upload Windows binary
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./build/windows-latest-binary
        asset_name: windows_binary
        asset_content_type: application/octet-stream
